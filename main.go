package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	bot    *tgbotapi.BotAPI
	logger = log.New(os.Stdout, "BOT: ", log.LstdFlags|log.Lshortfile)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º sync.Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	progressCache sync.Map
)

type Config struct {
	BotToken string
}

type Task struct {
	ID      int
	Text    string
	Answer  string
	Options []string
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := loadConfig()
	if err != nil {
		logger.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	if bot, err = tgbotapi.NewBotAPI(cfg.BotToken); err != nil {
		logger.Panic("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", err)
	}
	logger.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	go processUpdates(tgbotapi.NewUpdate(0))

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π HTTP —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
	go func() {
		if err := http.ListenAndServe(":"+port, nil); err != nil {
			logger.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
	select {} // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ main, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å
}

func loadConfig() (*Config, error) {
	var cfg Config
	cfg.BotToken = os.Getenv("TELEGRAM_TOKEN") // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

	if cfg.BotToken == "" {
		return nil, fmt.Errorf("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	return &cfg, nil
}

func processUpdates(updateConfig tgbotapi.UpdateConfig) {
	updates := bot.GetUpdatesChan(updateConfig)

	for update := range updates {
		if update.CallbackQuery != nil {
			handleCallbackQuery(update.CallbackQuery)
			continue
		}

		if update.Message != nil && update.Message.IsCommand() {
			handleCommand(update.Message)
		}
	}
}

func handleCommand(msg *tgbotapi.Message) {
	switch msg.Command() {
	case "start":
		sendWelcome(msg.Chat.ID)
	case "task":
		handleTaskCommand(msg.Chat.ID)
	case "progress":
		showProgress(msg.Chat.ID)
	default:
		sendMessage(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§∑")
	}
}

func handleTaskCommand(chatID int64) {
	task := getNextTask(chatID)
	if task == nil {
		sendMessage(chatID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ä–µ—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ üéâ")
		return
	}
	sendTask(chatID, task)
}

func getNextTask(userID int64) *Task {
	progress, err := getUserProgress(userID)
	if err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: %v", err)
		return nil
	}

	tasks := getTasks()
	for i := range tasks {
		if solved, exists := progress[tasks[i].ID]; !exists || !solved {
			return &tasks[i]
		}
	}
	return nil
}

func sendTask(chatID int64, task *Task) {
	var buttons []tgbotapi.InlineKeyboardButton
	for _, option := range task.Options {
		callbackData := fmt.Sprintf("%d:%s", task.ID, option)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(option, callbackData))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", task.Text))
	msg.ReplyMarkup = keyboard

	if _, err := bot.Send(msg); err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏: %v", err)
	}
}

func handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	parts := strings.SplitN(query.Data, ":", 2)
	if len(parts) != 2 {
		logger.Printf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback: %s", query.Data)
		return
	}

	taskID, err := strconv.Atoi(parts[0])
	if err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ taskID: %v", err)
		return
	}

	task := findTask(taskID)
	if task == nil {
		logger.Printf("–ó–∞–¥–∞—á–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", taskID)
		return
	}

	userID := query.From.ID
	answerCorrect := parts[1] == task.Answer

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	if answerCorrect {
		if err := saveUserProgress(int64(userID), task.ID, true); err != nil {
			logger.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: %v", err)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
	callbackCfg := tgbotapi.NewCallback(query.ID, "")
	if answerCorrect {
		callbackCfg.Text = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ"
	} else {
		callbackCfg.Text = "–ù–µ–≤–µ—Ä–Ω–æ ‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
	}

	if _, err := bot.Request(callbackCfg); err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: %v", err)
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
	if answerCorrect {
		if nextTask := getNextTask(int64(userID)); nextTask != nil {
			sendTask(int64(userID), nextTask)
		} else {
			sendMessage(int64(userID), "üéâ –í—ã —Ä–µ—à–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏!")
		}
	}
}

func findTask(taskID int) *Task {
	for i := range getTasks() {
		if getTasks()[i].ID == taskID {
			return &getTasks()[i]
		}
	}
	return nil
}

func getTasks() []Task {
	return []Task{
		{ID: 1, Text: "–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ Go?", Answer: "var", Options: []string{"let", "const", "var", "define"}},
		{ID: 2, Text: "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –≤ Go?", Answer: "int", Options: []string{"integer", "float", "int", "number"}},
		{ID: 3, Text: "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç—Ä–æ–∫ –≤ Go?", Answer: "string", Options: []string{"char", "string", "text", "varchar"}},
		{ID: 4, Text: "–ö–∞–∫–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ Go?", Answer: "import", Options: []string{"include", "import", "use", "require"}},
		{ID: 5, Text: "–ß—Ç–æ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥–∞ fmt.Println(1+1) –≤ Go?", Answer: "2", Options: []string{"1", "2", "3", "–û—à–∏–±–∫–∞"}},
	}
}

func sendWelcome(chatID int64) {
	text := `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è Go! üöÄ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/task - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/progress - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å`
	sendMessage(chatID, text)
}

func showProgress(chatID int64) {
	progress, err := getUserProgress(chatID)
	if err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: %v", err)
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üòï")
		return
	}

	total := len(getTasks())
	solved := 0
	for _, v := range progress {
		if v {
			solved++
		}
	}

	text := fmt.Sprintf("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: üìä\n\n–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: %d/%d\n–ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f%%",
		solved, total, float64(solved)/float64(total)*100)
	sendMessage(chatID, text)
}

func getUserProgress(userID int64) (map[int]bool, error) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
	if cached, ok := progressCache.Load(userID); ok {
		return cached.(map[int]bool), nil
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
	progress := make(map[int]bool)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫—ç—à
	progressCache.Store(userID, progress)

	return progress, nil
}

func saveUserProgress(userID int64, taskID int, solved bool) error {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –∫—ç—à–∞
	progress, _ := getUserProgress(userID)

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
	progress[taskID] = solved

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫—ç—à
	progressCache.Store(userID, progress)

	return nil
}

func sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := bot.Send(msg); err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
